README, Explanation of Donut Implementation.

There are a few important implementation details from my implementation of the Donut class. Most of the work involved was with the equals() method and the compareTo method. I implemented these methods, as a way to determine if two instances of the Donut class have the same surface area. When I was finished with writing the compareTo() and equals() methods for the donut class, I realized that they would never find two donuts to be the same, unless they have identical radius measurements. I wanted a method that could find two Donuts to be equivalent in area, even if they don't have identical radius measurements. I think it's just based on the the formula for calculating area of a circle and how you will have to round it. So I decided that the best thing to do was to round the double result after it is received from the getSurfaceArea() method in class Donut, from a double to a float. This only affects when you're comparing two Donuts with the equals() method or the compareTo method. My implementation will not affect the value returned by the getSurfaceArea method in the Donut class. I did not find that any type-casting from double to float was necessary in the compareTo() and equals() methods in the Square and Circle classes. With my implementation of compareTo() and equals() in class Donut, some data is rounded off, but I think it is worth it. Thinking on this same topic, in the Circle and Square class, the only Circles and Squares that could ever be equivalent in surface area would have identical sideLength and radius values. This was the most interesting part of the implementation. After I finally resolved the typos and stupid errors, this was the problem that I was faced with. I solved it by rounding the surface area values received from getSurfaceArea() and comparing the float values. 

The outline of a dount has an inner circle and an outer circle. Each circle has a radius. I implemented the class with two fields or parameters, which represent the two radiuses of your average donut. I created constructors, accessors, and mutators. With my default value constructor, the default values are 1 and 2 for the two radiuses. I wanted instance objects to be initialized to a valid donut size. Radius values should all be positive double values. I don't know what kind of real world object would have a negative radius. This was my assumption. I did not test for other values. Most details were implemented the same in class Donut as in Circle and Square, except that the donut class has two parameters instead of one and I used two separate methods for accessing the parameter values for a Donut object. 



